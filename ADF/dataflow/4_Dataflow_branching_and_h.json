{
	"name": "4_Dataflow_branching_and_h",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS1_DF_inbound",
						"type": "DatasetReference"
					},
					"name": "empinfo"
				},
				{
					"dataset": {
						"referenceName": "Ds_df_deptdetails",
						"type": "DatasetReference"
					},
					"name": "deptinfo"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Sink_DF",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          firstname as string,",
				"          lastname as string,",
				"          age as string,",
				"          salary as integer,",
				"          gender as string,",
				"          deptno as integer,",
				"          state as string,",
				"          mobilenumber as string,",
				"          mail as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empinfo",
				"source(output(",
				"          deptno as integer,",
				"          deptname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> deptinfo",
				"empinfo, deptinfo join(empinfo@deptno == deptinfo@deptno,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"empinfo aggregate(groupBy(deptno),",
				"     totalsalary = sum(salary)) ~> aggregate1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          order_id as string,",
				"          { customer_id} as string",
				"     ),",
				"     partitionFileNames:['4th_result'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}