{
	"name": "5_conditionalSplit Dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS1_DF_inbound",
						"type": "DatasetReference"
					},
					"name": "empflow"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Sink_DF",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_Sink_DF",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          firstname as string,",
				"          lastname as string,",
				"          age as string,",
				"          salary as string,",
				"          gender as string,",
				"          deptno as string,",
				"          state as string,",
				"          mobilenumber as string,",
				"          mail as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empflow",
				"empflow split(gender=='M',",
				"     disjoint: false) ~> split1@(maledata, femaledata)",
				"split1@maledata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          order_id as string,",
				"          { customer_id} as string",
				"     ),",
				"     partitionFileNames:['maledata.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@femaledata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          order_id as string,",
				"          { customer_id} as string",
				"     ),",
				"     partitionFileNames:['Femaledata'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}